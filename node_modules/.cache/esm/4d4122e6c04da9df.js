_c04‍.x([["default",()=>_c04‍.o]]);
const crypto = require("crypto");

const key = new Buffer.alloc(16,hash.digest('hex'),'hex');
const iv  = new Buffer.alloc(16,crypto.pseudoRandomBytes(16));

function encryptText() {

  const cipher = crypto.createCipher('aes192', 'a password');

  let encrypted = cipher.update('some clear text data', 'utf8', 'hex');
  console.log(encrypted);

  return encrypted += cipher.final('hex');
}


class UserController {
    
    constructor( User, Accesstoken ) {
        this.user = User;
        this.accesToken = Accesstoken;
    }

    async checkLoginExistences( login, type ) {
        try { 
            
            switch ( type ) {
              
              case "email":
                
                const UserExistence = await this.user.findOne({ "email": login }).exec();
                return UserExistence;

              case "username":
                
                //console.log(166);
        
                this.user.findOne({ username:`${login}`}, ( err, data ) => {
                          
                    if ( err ) throw err;
                      
                      if ( data === null || data === [] ) {
                
                        return [];
                      
                      }
                    
                      //console.log(" Dado do form : " + login + " Login type : " + type + "Res:"+ data);
                    
                    return data ; 
                  
                  });
        
                break;
        
              case "cpf":
        
                //console.log(189);
              
                this.user.findOne({ cpf:`${login}`}, ( err, data ) => {
                          
                    if ( err ) throw err;
                      
                      if ( data === null || data === [] ) {
                
                        return [];
                      
                      }
                    
                     // console.log(" Dado do form : " + login + " Login type : " + type + "Res:"+ data);
                    
                    return data ; 
                  
                  });
                  
                break;
        
              case "cnpj":
              
                //console.log(211);
              
                this.user.findOne({ cnpj:`${login}`}, ( err, data ) => {
                            
                    if ( err ) throw err;
                      
                      if ( data === null || data === [] ) {
                
                        return [];
                      
                      }
                    
                      //console.log(" Dado do form : " + login + " Login type : " + type + "Res:"+ data);
                    
                    return data ; 
                  
                  });
              
                break;  
        
              default:
              
                  //console.log(232);
                
                return [];
            
            } 
            
          } catch ( e ) {
          
            console.log(e);
         
          }
    }

    async checkPasswordExistence ( user_id, password ) {
    
      try {
        
        const encrypt = encryptText();
        console.log('encrypt: '+ encrypt);

        const PasswordExistence = await this.user.findOne({"_id": user_id,  "password": decriptPassword( password )}).exec();
        // console.log(PasswordExistence, 109);

        return PasswordExistence;
        
      } catch (e) {
    
        console.log(e);
     
      }
    };
}

_c04‍.d(UserController);