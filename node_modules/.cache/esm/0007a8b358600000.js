<<<<<<< HEAD:node_modules/.cache/esm/0007a8b31ddb92af.js
let checkLoginType,checkLoginExistences,checkPasswordExistence,creatToken;_1dd‍.w("../app/assets/js/scripts",[["checkLoginType",["checkLoginType"],function(v){checkLoginType=v}],["checkLoginExistences",["checkLoginExistences"],function(v){checkLoginExistences=v}],["checkPasswordExistence",["checkPasswordExistence"],function(v){checkPasswordExistence=v}],["creatToken",["creatToken"],function(v){creatToken=v}]]);//Scripts and aux plugin
  
=======
let checkLoginType,checkLoginExistences,checkPasswordExistence,creatToken;_586‍.w("../app/assets/js/scripts",[["checkLoginType",["checkLoginType"],function(v){checkLoginType=v}],["checkLoginExistences",["checkLoginExistences"],function(v){checkLoginExistences=v}],["checkPasswordExistence",["checkPasswordExistence"],function(v){checkPasswordExistence=v}],["creatToken",["creatToken"],function(v){creatToken=v}]]);  
>>>>>>> Password method checkPassword finished:node_modules/.cache/esm/0007a8b358600000.js
  const User = require('../models/User');

    const UsuarioController = require('./user.controller').default;
    const usuarioController = new UsuarioController(User)

exports.login = async ( req, reply ) => {

  const { login, password } = req.body;

  if ( login && password ) { 

    const login_type = await checkLoginType( login );
<<<<<<< HEAD:node_modules/.cache/esm/0007a8b31ddb92af.js

    _1dd‍.g.console.log("Login type: "+login_type+"\n");

    if ( login_type ) {
    
      const user_existence = await testeController.checkLoginExistences( login, login_type ); 
      _1dd‍.g.console.log(user_existence);
      _1dd‍.g.console.log("user_existence: "+user_existence+"\n" );
      
      if ( user_existence ) {

        const password_existence =  await checkPasswordExistence( user_existence.id, password ); //Aqui ele recupera o id do resultado data
        _1dd‍.g.console.log("password_existence: "+password_existence+"\n");
=======
    _586‍.g.console.log("Login type: "+login_type+"\n");

    if ( login_type ) {
    
      const user_existence = await usuarioController.checkLoginExistences( login, login_type ); 
      _586‍.g.console.log("user_existence: "+user_existence+"\n" );
      
      if ( user_existence ) {

        const password_existence =  await usuarioController.checkPasswordExistence( user_existence.id, password );
        _586‍.g.console.log("password_existence: "+password_existence+"\n");
>>>>>>> Password method checkPassword finished:node_modules/.cache/esm/0007a8b358600000.js
        
        if ( password_existence ) {

          const user_existense = password_existence;
          _586‍.g.console.log(user_existence, 123455);

          await creatToken(user_existense.id);
<<<<<<< HEAD:node_modules/.cache/esm/0007a8b31ddb92af.js
          _1dd‍.g.console.log("O usuario existe "+creatToken(user_existence.id));
=======
          _586‍.g.console.log("O usuario existe "+creatToken(user_existence.id));
>>>>>>> Password method checkPassword finished:node_modules/.cache/esm/0007a8b358600000.js
          
          reply
          .header('Content-Type', 'application/json; charset=utf-8')
          .send({
            "statusCode": 404,
            "result": 'Login successfully',
            "green": 0,
            "redCode": 1,
            "message": "",
            "stackResult": {
              "message": `login done successfully!s `
            }
          });
        } else {
        
<<<<<<< HEAD:node_modules/.cache/esm/0007a8b31ddb92af.js
          _1dd‍.g.console.log("Password not existense "+ user_existence +"\n");
=======
          _586‍.g.console.log("Password not existense "+ user_existence +"\n");
>>>>>>> Password method checkPassword finished:node_modules/.cache/esm/0007a8b358600000.js
        
          reply
          .header('Content-Type', 'application/json; charset=utf-8')
          .send({
              "statusCode": 404,
              "result": 'Invalid password',
              "green": 0,
              "redCode": 1,
              "message": "Password invalid.",
              "stackResult": {
                    "message": `error: Password is invalid.`
              }
          });
        }
      } else {

<<<<<<< HEAD:node_modules/.cache/esm/0007a8b31ddb92af.js
        _1dd‍.g.console.log("User not existense "+ user_existence +"\n");
=======
        _586‍.g.console.log("User not existense "+ user_existence +"\n");
>>>>>>> Password method checkPassword finished:node_modules/.cache/esm/0007a8b358600000.js
      
        reply
        .header('Content-Type', 'application/json; charset=utf-8')
        .send({
          "statusCode": 500,
          "result": `No register in database!`,
          "green": 0,
          "redCode": 5,
          "message": `No query result`,
          "stackResult": {
            "message": "Error: No query result"
          }
        });
      }
    } else {

      reply
      .header('Content-Type', 'application/json; charset=utf-8')
      .send(
        {
          "statusCode": 404,
          "result": 'Invalid value',
          "green": 0,
          "redCode": 1,
          "message": "Insert a valid login.",
          "stackResult": {
                "message": `error: Invalid type.`
          }
        }
      );
    }
  } else {
    
    if ( !password ) {
      reply
        .header('Content-Type', 'application/json; charset=utf-8')
        .send({
          "statusCode": 404,
          "result": 'Password is empty.',
          "green": 0,
          "redCode": 1,
          "message": "You need Fill the password.",
          "stackResult": {
            "message": `error: password is empty.`
          }
        });
    }

    reply
      .header('Content-Type', 'application/json; charset=utf-8')
      .send({
        "statusCode": 404,
        "result": 'Login field is empty',
        "green": 0,
        "redCode": 1,
        "message": "You need Fill the login field.",
        "stackResult": {
          "message": `error: Field login is empty`
        }
      });
  }

}
